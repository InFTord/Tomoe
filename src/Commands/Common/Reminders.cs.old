using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using DSharpPlus;
using DSharpPlus.CommandsNext;
using DSharpPlus.CommandsNext.Attributes;
using DSharpPlus.Entities;
using Microsoft.Extensions.DependencyInjection;
using OoLunar.Tomoe.Database;
using OoLunar.Tomoe.Services;

namespace OoLunar.Tomoe.Commands.Common
{
    [Group("reminder"), Aliases("reminders", "remind", "r"), Description("Set a reminder to go off in DM's later.")]
    public sealed class Reminders : BaseCommandModule
    {
        public DiscordExpireTimer<ReminderModel> ReminderService { private get; init; } = null!;

        [GroupCommand]
        public Task RemindAsync(CommandContext context, TimeSpan? expiresAt = null, [RemainingText] string? message = null) => RemindAsync(context, DateTimeOffset.UtcNow.Add(expiresAt ?? TimeSpan.FromMinutes(5)), message);

        [GroupCommand]
        public async Task RemindAsync(CommandContext context, DateTimeOffset expiresAt, [RemainingText] string? message = null)
        {
            if (expiresAt < DateTimeOffset.UtcNow)
            {
                await context.RespondAsync("The reminder must be set in the future!");
            }

            ReminderModel reminder = new()
            {
                UserId = context.User.Id,
                GuildId = context.Guild?.Id ?? 0,
                ChannelId = context.Channel.Id,
                MessageId = context.Message.Id,
                ExpiresAt = expiresAt,
                Message = message
            };
            ReminderService.Add(reminder);

            await context.RespondAsync($"Reminder set to expire at {Formatter.Timestamp(expiresAt, TimestampFormat.ShortDateTime)} {Formatter.Timestamp(expiresAt, TimestampFormat.RelativeTime)}.");
        }

        [Command("edit"), Description("Edit a reminder.")]
        public async Task EditReminderAsync(CommandContext context, Ulid reminderId, DateTimeOffset? expiresAt = null, [RemainingText] string? message = null)
        {
            ReminderModel? reminder = ReminderService.GetItem(reminderId);
            if (reminder == null)
            {
                // Theoretically this shouldn't happen but /shrug
                await context.RespondAsync("You don't have a reminder set!");
                return;
            }

            if (expiresAt != null)
            {
                reminder.ChangeExpireDate(expiresAt.Value);
            }

            if (message != null)
            {
                reminder.Message = message;
            }

            await context.RespondAsync("Reminder updated!");
        }

        public static async Task ReminderUpdatedAsync(IServiceProvider serviceProvider, ReminderModel reminderModel, IEnumerable<DiscordMessage>? messageList)
        {
            if (messageList == null)
            {
                return;
            }

            DiscordShardedClient shardedClient = serviceProvider.GetRequiredService<DiscordShardedClient>();
            if (shardedClient.ShardClients.Count == 0)
            {
                return;
            }

            DiscordGuildPrefixResolverService prefixResolverService = serviceProvider.GetRequiredService<DiscordGuildPrefixResolverService>();

            DiscordMessage message = messageList.First();
            DiscordClient client = shardedClient.GetShard(message.Channel.GuildId ?? 0);
            CommandsNextExtension commandsNext = client.GetCommandsNext();

            int argumentStartPosition = await prefixResolverService.ResolveAsync(message);
            string[] commandStringSplit = message.Content[argumentStartPosition..].Split(' ');
            commandStringSplit[0] = commandStringSplit[0] + " edit " + reminderModel.Id.ToString();
            Command command = commandsNext.FindCommand(string.Join(' ', commandStringSplit), out string? rawArguments)!;
            CommandContext context = commandsNext.CreateContext(message, message.Content[0..argumentStartPosition], command, rawArguments);
            await commandsNext.ExecuteCommandAsync(context);
        }
    }
}
